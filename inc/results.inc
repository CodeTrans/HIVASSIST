<?php
/**
*
*
*/
function hivassist_exclude_drugs($exclude, &$defs) {
	if (!empty($exclude)) {
		foreach ($exclude as $k => $v) {
			foreach ($defs['all'] as $k1 => $v1) {
				if (($k2 = array_search($v, $v1)) !== false) {
					unset($defs['exclude'][$k1][$k2]);
				}
			}
		}
    foreach ($defs['all'] as $k1 => $v1) {
      $defs['exclude'][$k1] = array_values($defs['exclude'][$k1]);
    }
	}
}

/*************************
******* MUTATIONS ********
*************************/

/**
* Function to parse mutations: (1) list: array("M184V, K65R") -> array("M184V", "K65R"). The string is split by space, comma, or both.
* (2) parsed: array("M184V") -> array("M", "184", "V") which is referenced by the search_mutations function
*/
function hivassist_parse_mutations(&$mutations) {
	$mutations['list'] = array_filter(preg_split('/[,\s]+/', $mutations['list']));

	foreach ($mutations['list'] as $k => $v) {
		$mutations['parsed'][$k] = preg_split('/(?<=\d)(?=[a-z])|(?<=[a-z])(?=\d)/i', $v);
  }
}

/**
* Searches Mutations_* table for individual mutations
* Referenced by the search_mutations master function
*/
function hivassist_search_individual_mutations($class, &$mutations) {
  global $defs;
  
	foreach ($mutations['parsed'] as $k => $v) {
		$result = db_query("SELECT * FROM Mutations_".$class." WHERE Position = :position AND AA = :aa", 
			array(':position' => $v[1], ':aa' => $v[2]));
		$data = $result->fetchAll();

		if(!empty($data)) { // If there is a result, write it to the array
			foreach ($defs['all'][$class] as $k1 => $v1) {
				$mutations['penalties'][$class][$v1][$mutations['list'][$k]] = (float) $data[0]->$v1;
			}

		} else { // Otherwise, fill the array with zeros
			foreach ($defs['all'][$class] as $k1 => $v1) {
  			$mutations['penalties'][$class][$v1][$mutations['list'][$k]] = (float) 0;	
      }
		}
	}	
}

/**
* Search Mutations_combos_* for combination mutations
* Referenced by the search_mutations master function
*/
function hivassist_search_combos_mutations($class, &$mutations) {
  global $defs;
  
	foreach ($mutations['list'] as $k => $v) {
		$result = db_query("SELECT * FROM Mutations_combos_".$class." WHERE Mutation1 LIKE :mutation", 
			array(':mutation' => '%'.db_like($v).'%'));
		$data = $result->fetchAll();

		if(!empty($data)) {		// if the mutation we are searching is found in Mutation1
			foreach ($mutations['list'] as $k1 => $v1) { 
				foreach ($data as $k2 => $v2) {
					if (strpos($v2->Mutation2, $v1) !== false) { // if a combination mutation is found in Mutation2
						if(!empty($v2->Mutation3)) {
							foreach ($mutations['list'] as $k3 => $v3) {
								if (strpos($v2->Mutation3, $v3) !== false) { // if a combination mutation is found in Mutation3
                  foreach ($defs['all'][$class] as $k4 => $v4) {
                    $mutations['penalties'][$class][$v4][$v.'+'.$v1.'+'.$v3] = (float) 0;
                  }
									$mutations['penalties'][$class][$v2->Drug][$v.'+'.$v1.'+'.$v3] = $v2->Penalty;
								}
							}
						} else {
  						foreach ($defs['all'][$class] as $k4 => $v4) {
    						$mutations['penalties'][$class][$v4][$v.'+'.$v1] = 0;
  						}
							$mutations['penalties'][$class][$v2->Drug][$v.'+'.$v1] = (float) $v2->Penalty;
						}
					}
				}		
			}
		}
	}	
}

/**
* Master function to return the individual, combination, and summed scores for each mutation
* References hivassist_search_individual_mutations, search_combo_mutations, SUM MUTATIONS????????
*/
function hivassist_search_mutations(&$mutations) {
	global $defs;

	if (empty($mutations['list'])) {
    foreach ($defs['all'] as $k => $v) {
      foreach ($defs['all'][$k] as $k1 => $v1) {
        $mutations['penalties'][$k][$v1]['Total'] = (float) 0;
      }
    }
	} else { 	
  	hivassist_parse_mutations($mutations); // Parse the mutations
  
    foreach ($defs['all'] as $k => $v) {
      hivassist_search_individual_mutations($k, $mutations);
      hivassist_search_combos_mutations($k, $mutations); 

      foreach ($mutations['penalties'][$k] as $k1 => $v1) {
        $mutations['penalties'][$k][$k1]['Total'] = (float) array_sum($mutations['penalties'][$k][$k1]);
      }
    }
  } 
}


/**
* Function to generate the HTML table for output in the Mutation Penalties tab
* Incorporates the $mutations variable as generated by the search_mutations function
*/
function hivassist_generate_mutations_table($mutations) {
  global $defs;

  foreach ($defs['exclude'] as $k => $v) {
    $header = $defs['all'][$k];
    array_unshift($header, 'Mutation(s)');

    $row = $rows = array();

    if(isset($mutations['penalties'][$k])) {
      reset($mutations['penalties'][$k]); // Reset the pointer of the array to the first element
      $p = key($mutations['penalties'][$k]); // Gets the associative key (drug) of the array 
 
      foreach ($mutations['penalties'][$k][$p] as $k1 => $v1) {
        $row[$k1] = array_column($mutations['penalties'][$k], $k1);    
      }
      
      foreach ($row as $k1 => $v1) {
        $rows[] = array_merge(array($k1), $v1);
      }      
   
      $mutations_table[$k] = theme('table', array('header' => $header, 'rows' => $rows));      
    }
  }  
  
  return $mutations_table;
}

/*************************
**** COMORBIDITIES & *****
***** INTERACTIONS *******
*************************/

/**
* Master function to return the ART-comorbidity penalties for each cormobidty input
* 
*/
function hivassist_search_comorbidities(&$comorbidities) {
	global $defs;

  if (empty($comorbidities['list'][0])) {
    $comorbidities['drugs'] = array();
  } else {
  	foreach ($comorbidities['list'] as $k => $v) {
    	$result = db_query("SELECT * FROM Comorbidity_".$v);
      $data = $result->fetchAll();
    
      foreach ($data as $k1 => $v1) {
        if ($v1->Score > 0) {
    			$comorbidities['drugs'][$v1->Drug][$v] = array(
            'Score' => (float) $v1->Score,
      		  'Notes' => $v1->Notes,
      		  'Reference' => $v1->Reference,
      		  'Link' => $v1->Link
    			);
    		} else {
          if (!isset($comorbidities['drugs'][$v1->Drug])) {
        		$comorbidities['drugs'][$v1->Drug] = NULL;
          }
    		}
      }	
  	}
	}
}

/**
* Master function to return ART-drug penalties for each (non ART) drug input
* 
*/
function hivassist_search_interactions(&$interactions) {
	global $defs;

  if (empty($interactions['list'][0])) {
    $interactions['drugs'] = array();
  } else {
  	foreach ($interactions['list'] as $k => $v) {
    	$result = db_query("SELECT * FROM Drug_Interaction_".$v);
      $data = $result->fetchAll();
    
      foreach ($data as $k1 => $v1) {
        if ($v1->Score > 0) {
    			$interactions['drugs'][$v1->Drug][$v] = array(
            'Score' => (float) $v1->Score,
      		  'Notes' => $v1->Notes,
      		  'Reference' => $v1->Reference,
      		  'Link' => $v1->Link
    			);
        }
      }	
  	}
	}
}

/**
* Function to generate the HTML table for output in the Comorbidities or Interaction Warnings tab
* Incorporates the $comorbidities or $interactions variables as generated by the search_mutations or search_interactions functions
*/
function hivassist_generate_comorbidities_interactions_table($q, $inputs) {
  global $defs;

  if ($q == 'comorbidities') {
    $r = $inputs;
  } elseif ($q == 'interactions') {
    $r = $inputs;
  }
  if (empty($r['list'][0])) {
    $s['No'] = NULL;
  } else {

   $header = array('Drug', 'Notes', 'Reference');

    foreach ($r['list'] as $k => $v) {
      foreach ($defs['exclude'] as $k1 => $v1) {
        foreach ($defs['exclude'][$k1] as $k2 => $v2) {
          if (isset($r['drugs'][$v2][$v]) && $r['drugs'][$v2][$v]['Score'] > 0) {
            $row[$v][$v2]['Drug'] = $v2;
            $row[$v][$v2]['Notes'] = $r['drugs'][$v2][$v]['Notes'];
            
            if (!empty($r['drugs'][$v2][$v]['Link'])) {
              $row[$v][$v2]['Reference'] = l($r['drugs'][$v2][$v]['Reference'], $r['drugs'][$v2][$v]['Link'], array('attributes' => array('target' => '_blank')));
              
            } else {
              $row[$v][$v2]['Reference'] = $r['drugs'][$v2][$v]['Reference'];
            }
          }
        }
      }
      
      if (!empty($row[$v])) {
        $rows[$v] = $row[$v];
        $s[$v] = theme('table', array('header' => $header, 'rows' => $rows[$v]));            
      }
    }
  }
  
  if (empty($s)) {
    $s['No'] = NULL;
  }
  
  return $s;
}

/*************************
**** ART INTERACTIONS ****
*************************/
/*
*
*
*/
function hivassist_add_art_interactions(&$regimen, $artinteractions) {
	foreach ($regimen['Combination'] as $k => $v) {
		foreach ($regimen['Combination'] as $k1 => $v1) {
			$interaction = $artinteractions[$v]->$v1;

			if (!empty($interaction)) {
			  if ($interaction[0] > 0) {
  				$regimen['ART Interactions'][] = array('Score' => (float) $interaction[0], 'Reference' => 'Between ' .$v. ' and ' .$v1. ': ' .substr($interaction, 2));

        }
			}
		}
	}
}

/*************************
*** GENERATE RANKINGS ****
*************************/
/**
* Function to generate combinations, if given an array of drugs to generate from
* Create all drug permutation combinations (adapted from https://gist.github.com/fabiocicerchia/4556892)
*/
function hivassist_generate_combinations(array $inputs, array &$all = array(), array $group = array(), $value = null, $i = 0) {
  $keys = array_keys($inputs['drugs']);
  if (isset($value) === true) {
    array_push($group, $value);
  }

  if ($i >= count($inputs['drugs'])) {
	  $group_sort_tmp = $group;
		sort($group_sort_tmp);
    array_push($all, $group);
  } else {
    $currentkey = $keys[$i];
    $currentelement = $inputs['drugs'][$currentkey];
    foreach ($currentelement as $val) {
      hivassist_generate_combinations($inputs, $all, $group, $val, $i + 1);
    }
  }

	// Remove combination if single drug is included twice and remove duplicate combinations
	$temp_all = array();
	foreach ($all as $k => $v) {
		$v_sort_tmp = $v;
		sort($v_sort_tmp);
		if (!isset($temp_all[implode("+", $v_sort_tmp)]) && (count($inputs['drugs']) == count(array_unique($all[$k])))) {
			$temp_all[implode("+", $v_sort_tmp)] = $v;
		}
	}

	$all = $temp_all;

	$combos = array(
	  'Rule' => $inputs['Rule'],
	  'Score' => (float) $inputs['Score'],
	  'Combination Rule' => $inputs['Combination Rule'],
	  'Combination' => array_values($all),
  );

  if (isset($inputs['NumberofDrugs'])) {
    $combos['NumberofDrugs'] = $inputs['NumberofDrugs'];
  }

  if (isset($inputs['RegimenType'])) {
    $combos['RegimenType'] = $inputs['RegimenType'];
  }

  return $combos;
}

/**
*
*
*/
function hivassist_generate_generic_rankings($options) {
	global $defs;

  $classes = array_keys($defs['all']);

  $headers = array('Rule', 'Score', 'ScoreHighVL', 'ScoreSuppressedVL', 'RegimenType', 'NumberofDrugs');
	
	$result = db_query("SELECT * FROM Regimen_rankings_Expert");
	$data = $result->fetchAll();

	foreach ($data as $k => $v) {
		if ($data[$k]->RegimenType == 'Generic' && ($data[$k]->Score < 6)) {
			foreach ($headers as $k1 => $v1) {
				$data_tmp[$k][$headers[$k1]] = $data[$k]->$headers[$k1];
			}
			foreach ($classes as $k1 => $v1) {
  			$data_tmp[$k]['Combination Rule'][$classes[$k1]] = $data[$k]->$classes[$k1];
			}
		}
	}
	
	$data = array_values($data_tmp);

	$combos = array();
	
	foreach ($data as $k => $v) {
		$array = array();

    $inputs = array(
      'Rule' => $data[$k]['Rule'],
      'NumberofDrugs' => $data[$k]['NumberofDrugs'],
      'RegimenType' => $data[$k]['RegimenType'],
      'Combination Rule' => $data[$k]['Combination Rule'],
    );

		if ($options['viralload'] == 'high' && $data[$k]['ScoreHighVL'] != 0) {
			$inputs['Score'] = (float) $data[$k]['ScoreHighVL'];			
		} elseif ($options['viralload'] == 'suppressed' && $data[$k]['ScoreSuppressedVL'] != 0) {
			$inputs['Score'] = (float) $data[$k]['ScoreSuppressedVL'];
		} else {
			$inputs['Score'] = (float) $data[$k]['Score'];
		}

    foreach ($headers as $k1 => $v1) {
      unset($data[$k][$v1]);
    }

		foreach ($data[$k]['Combination Rule'] as $k1 => $v1) {
			if ($v1 > 0) {
				for ($i = 1; $i <= $v1; $i++) {
					$inputs['drugs'][] = $defs['exclude'][$k1];
				}
			}
		}

		$combos[] = hivassist_generate_combinations($inputs);
	}

	foreach ($combos as $k => $v) {
		foreach ($combos[$k]['Combination'] as $k1 => $v1) {
    
    hivassist_add_regimen_ritonavor_or_cobi($combos[$k]['Combination'][$k1], $combos[$k]['Combination Rule']);
			
		// Create the row with the combination information 
			$regimen = array(
    		'Combination' => $combos[$k]['Combination'][$k1],
        'Rule' => $combos[$k]['Rule'],
        'Score' => (float) $combos[$k]['Score'],
  			'Combination Rule' => $combos[$k]['Combination Rule'],
  			'NumberofDrugs' => $combos[$k]['NumberofDrugs'],
  			'RegimenType' => $combos[$k]['RegimenType'],
			);		
	
      $regimens['Expert'][] = $regimen;
		
			// Add ATV, ATVc, and DRVc
			if (in_array('ATVr', $combos[$k]['Combination'][$k1])) {
				$k2 = array_search('ATVr', $combos[$k]['Combination'][$k1]);
				$regimen['Combination'][$k2] = 'ATV';
        $regimens['Expert'][] = $regimen;
				$regimen['Combination'][$k2] = 'ATVc';
				$regimens['Expert'][] = $regimen;
			}
			if (in_array('DRVr', $combos[$k]['Combination'][$k1])) {
				$k2 = array_search('DRVr', $combos[$k]['Combination'][$k1]);
				$regimen['Combination'][$k2] = 'DRVc';
				$regimens['Expert'][] = $regimen;
			}			
		}
	}

	return $regimens;
}

/*
*
*
*/
function hivassist_generate_specific_rankings(&$regimens, $options) {
	global $defs;	
	
	$ranking = array('Expert', 'DHHS', 'IAS');
  $headers['Expert'] = array('Rule', 'Score', 'ScoreHighVL', 'ScoreSuppressedVL', 'RegimenType', 'NumberofDrugs');
  $headers['DHHS'] = $headers['IAS'] = array('Rule', 'Score');
  	
	foreach ($ranking as $v) {
  	$result[$v] = db_query('SELECT * FROM Regimen_rankings_'.$v);
    $data[$v] = $result[$v]->fetchAll();

    foreach ($data[$v] as $k1 => $v1) {
      if ($v == 'Expert') {
        if ($data[$v][$k1]->RegimenType == 'Generic') {
          unset($data[$v][$k1]);
          continue;
        }

        $inputs = array(
          'Rule' => $data[$v][$k1]->Rule,
          'NumberofDrugs' => $data[$v][$k1]->NumberofDrugs,
          'RegimenType' => $data[$v][$k1]->RegimenType,
        );

        if ($options['viralload'] == 'high' && $data[$v][$k1]->ScoreHighVL != 0) {
    			$inputs['Score'] = (float) $data[$v][$k1]->ScoreHighVL;
    		} elseif ($options['viralload'] == 'suppressed' && $data[$v][$k1]->ScoreSuppressedVL != 0) {
    			$inputs['Score'] = (float) $data[$v][$k1]->ScoreSuppressedVL;
    		} else {
      		$inputs['Score'] = (float) $data[$v][$k1]->Score;
    		}
      } else {
        $inputs = array(
          'Rule' => $data[$v][$k1]->Rule,
          'Score' => (float) $data[$v][$k1]->Score,
          'RegimenType' => $v,
        );
      }      

			foreach ($data[$v][$k1] as $k2 => $v2) {
				if ($data[$v][$k1]->$k2 == 'YES') {
					$inputs['specifics'][] = $k2;
				}
			}

 			foreach ($defs['all'] as $k2 => $v2) {
  			$inputs['Combination Rule'][$k2] = $inputs['classes'][$k2] = $data[$v][$k1]->$k2;
			}
      
      if (count($inputs['specifics']) < array_sum($inputs['Combination Rule'])) {

  			foreach ($inputs['specifics'] as $k2 => $v2) {
  				foreach ($defs['all'] as $k3 => $v3) {
  					if (in_array(substr($inputs['specifics'][$k2], 0, 3), $defs['all'][$k3])) {
  						if($inputs['classes'][$k3] > 0) {
  							$inputs['classes'][$k3] = $inputs['classes'][$k3] - 1;
  						}
  					}
  				}
  			}
  
  			foreach ($inputs['classes'] as $k2 => $v2) {
  				if ($v2 > 0) {
  					for ($i = 1; $i <= $v2; $i++) {
  						$inputs['drugs'][] = $defs['exclude'][$k2];
  					}
  				}
  			}
      } else {
        $inputs['drugs'][] = array(); // define empty array to input into generate_combinations function
      }
        
  		$combos = hivassist_generate_combinations($inputs);

      $inputs['Combos'] = $combos['Combination'];
             
			if (!empty($combos['Combination'][0])) {
				foreach ($combos['Combination'] as $k2 => $v2) {
					if (!empty($inputs['specifics'])) {
						$inputs['Combination'] = array_merge($combos['Combination'][$k2], $inputs['specifics']);
						hivassist_add_regimen_ritonavor_or_cobi($inputs['Combination'], $inputs['Combination Rule']);
					} else {
						$inputs['Combination'] = $combos['Combination'][$k2];
						hivassist_add_regimen_ritonavor_or_cobi($inputs['Combination'], $inputs['Combination Rule']);
					}
          $regimen[$v][] = $inputs;
          
          if ($v == 'Expert') {
            $k3 = array_search('ATVr', $inputs['Combination']);
            if ($k3 !== FALSE) {
              $inputs['Combination'][$k3] = 'ATV';
              $regimen[$v][] = $inputs;
              $inputs['Combination'][$k3] = 'ATVc';
              $regimen[$v][] = $inputs;
            }
            $k3 = array_search('DRVr', $inputs['Combination']);
            if ($k3 !== FALSE) {
      				$inputs['Combination'][$k3] = 'DRVc';
      				$regimen[$v][] = $inputs;
      			}
          }
				}
			} else {
        $inputs['Combination'] = $inputs['specifics'];
				$regimen[$v][] = $inputs;
			}
    }
    
    $drugs = array();
    
    foreach ($defs['exclude'] as $k2 => $v2) {
      $drugs = array_merge($drugs, $v2);  
    }
        
    foreach ($regimen[$v] as $k1 => $v1) {
		  unset($regimen[$v]['specifics'], $regimen[$v]['drugs'], $regimen[$v]['classes']);
      if ($v == 'Expert') {
        foreach ($regimens[$v] as $k2 => $v2) {
          if (empty(array_diff($v1['Combination'],$v2['Combination'])) && empty(array_diff($v2['Combination'],$v1['Combination']))) {
            $regimen[$v][$k1]['Combination'] = $regimens[$v][$k2]['Combination']; // this is just to make sure that the order of the combination is the same for both specific and generic regimens
            $regimens[$v][$k2] = $regimen[$v][$k1];
            unset($regimen[$v][$k1]);
            continue 2;
          }
        }
      }
      
      // Only add the extra regimens if the drugs have not been excluded
      foreach ($v1['Combination'] as $k2 => $v2) {
        if (!in_array(substr($v2, 0, 3), $drugs)) {
          continue 2;
        }
      }
      
      $regimens[$v][] = $regimen[$v][$k1]; 
    }
	}
}

/*************************
**** PROCESS RANKINGS ****
*************************/

/*
* 
*
*/
function hivassist_add_regimen_mutations_comorbidities_interactions(&$regimen, $mutations, $comorbidities, $interactions) {
  global $defs;
   
  foreach ($regimen['Combination'] as $k => $v) {
    foreach ($defs['exclude'] as $k1 => $v1) {
      $class = NULL;
      if (in_array(substr($v, 0, 3), $defs['exclude'][$k1])) {           
        $regimen['Mutations'][$v] = $mutations['penalties'][$k1][substr($v, 0, 3)]['Total'];            
      }
    }
    
    if (isset($comorbidities['drugs'][substr($v, 0, 3)])) {
      $regimen['Comorbidities'][$v] = $comorbidities['drugs'][substr($v, 0, 3)];
    }
  			
  	if (isset($interactions['drugs'][substr($v, 0, 3)])) {
    	$regimen['Interactions'][$v] = $interactions['drugs'][substr($v, 0, 3)];    			
  	}
  }
}

/*
* Add r or cobi to PIs (except NFV) and EVGc
*
*/
function hivassist_add_regimen_ritonavor_or_cobi(&$regimen, $rule) {
  global $defs;
  
	// Add ritonavir to all the PI regimens
	if ($rule['PI'] >= 1) {
		foreach ($defs['exclude']['PI'] as $k2 => $v2) {
			$k3 = array_search($defs['exclude']['PI'][$k2], $regimen);
			if ($k3 !== FALSE) {
        $regimen[$k3] = $defs['exclude']['PI'][$k2].'r';  			
			}
		}
	}
			
	// But remove ritonavir from nelfinavir (which is not boosted with ritonavir)
  $k3 = array_search('NFVr', $regimen);
  if ($k3 !== FALSE) {
  	$regimen[$k3] = 'NFV';
  }

			
	// Add cobi to EVG
	$k3 = array_search('EVG', $regimen);
  if ($k3 !== FALSE) {
  	$regimen[$k3] = 'EVGc';
  }
}

/*
* Remove regimens that include both ritonavir or cobicistat (often times 4 drug regimens)
*
*/
function hivassist_remove_regimen_both_ritonavir_or_cobi(&$regimen) {
	if (in_array('EVGc', $regimen['Combination'])) {
  	if (count($regimen['Combination']) > 3) {
      $k = array_search('DRVr', $regimen['Combination']);
      if ($k !== FALSE) {
        $regimen['Combination'][$k] = 'DRV';    
        $regimen['Mutations']['DRV'] = $regimen['Mutations']['DRVr'];
        unset($regimen['Mutations']['DRVr']);
      }
      $k = array_search('DRVc', $regimen['Combination']);
      if ($k !== FALSE) {
        $regimen['Combination'][$k] = 'DRV';
        $regimen['Mutations']['DRV'] = $regimen['Mutations']['DRVc'];
        unset($regimen['Mutations']['DRVc']);
      }    	 
    } else {
      if ($regimen['Combination Rule']['PI'] >= 1) {
    		foreach ($regimen['Combination'] as $k => $v) {
    			if (substr($regimen['Combination'][$k], -1) == 'r') {
      			$regimen = NULL;
      			return;
      		}
    			if ($regimen['Combination'][$k] == 'DRVc') {
      			$regimen['Combination'][$k] = 'DRV';
            $regimen['Mutations']['DRV'] = $regimen['Mutations']['DRVc'];
            unset($regimen['Mutations']['DRVc']);
      		}
        }
      }
    }
	}
}

/*
*
*
*/
function hivassist_add_pill_burden(&$regimen, &$pillburden) {
  if (count($regimen['Combination']) == 4) {
    foreach ($pillburden['spc2'] as $k => $v) {
      if (count(array_diff($regimen['Combination'], $pillburden['spc2'][$k]['combo'])) == 1) {
        $regimen['Dosing'][] = array(
          'Combination' => implode('/', $pillburden['spc2'][$k]['combo']),
          'Dose' => $pillburden['spc2'][$k]['data']->Dose1 .'/'. $pillburden['spc2'][$k]['data']->Dose2 .'/'. $pillburden['spc2'][$k]['data']->Dose3,
          'Pills' => $pillburden['spc2'][$k]['data']->Pills,
          'Frequency' => $pillburden['spc2'][$k]['data']->Frequency,
          'Name' => $pillburden['spc2'][$k]['data']->Name,
          'Notes' => $pillburden['spc2'][$k]['data']->Notes,
        );

        $other = array_values(array_diff($regimen['Combination'], $pillburden['spc2'][$k]['combo']));
               
        $regimen['Dosing'][] = array(
          'Combination' => $other[0],
          'Dose' => $pillburden['individual'][$other[0]]['data']->Dose1,
          'Pills' => $pillburden['individual'][$other[0]]['data']->Pills,
          'Frequency' => $pillburden['individual'][$other[0]]['data']->Frequency,
          'Name' => $pillburden['individual'][$other[0]]['data']->Name,
          'Notes' => $pillburden['individual'][$other[0]]['data']->Notes,
        );

        return;
      }
    }
  }

  if (count($pillburden['spc'] >= 1) && count($regimen['Combination']) == 3) {
    foreach ($pillburden['spc'] as $k => $v) {
      if (empty(array_diff($regimen['Combination'], $pillburden['spc'][$k]['combo'])) && empty(array_diff($pillburden['spc'][$k]['combo'], $regimen['Combination']))) {
        $regimen['Dosing'][] = array(
          'Combination' => implode('/', $pillburden['spc'][$k]['combo']),
          'Dose' => $pillburden['spc'][$k]['data']->Dose1 .'/'. $pillburden['spc'][$k]['data']->Dose2 .'/'. $pillburden['spc'][$k]['data']->Dose3,
          'Pills' => $pillburden['spc'][$k]['data']->Pills,
          'Frequency' => $pillburden['spc'][$k]['data']->Frequency,
          'Name' => $pillburden['spc'][$k]['data']->Name,
          'Notes' => $pillburden['spc'][$k]['data']->Notes,
        );
        unset($pillburden['spc'][$k]);
        return;
      }
    }
  }
  
  if ($regimen['Combination Rule']['NRTI'] >= 2) {
    foreach ($pillburden['2nrti'] as $k => $v) {
      if (count(array_intersect($pillburden['2nrti'][$k]['combo'], $regimen['Combination'])) == 2) {
        $regimen['Dosing'][] = array(
          'Combination' => implode('/', $pillburden['2nrti'][$k]['combo']),
          'Dose' => $pillburden['2nrti'][$k]['data']->Dose1 .'/'. $pillburden['2nrti'][$k]['data']->Dose2,
          'Pills' => $pillburden['2nrti'][$k]['data']->Pills,
          'Frequency' => $pillburden['2nrti'][$k]['data']->Frequency,
          'Name' => $pillburden['2nrti'][$k]['data']->Name,
          'Notes' => $pillburden['2nrti'][$k]['data']->Notes,
        );
        
        $other = array_values(array_diff($regimen['Combination'], $pillburden['2nrti'][$k]['combo']));
               
        if (count($other) == 2) {
          foreach ($pillburden['2nrti'] as $k1 => $v1) {
            if (count(array_intersect($pillburden['2nrti'][$k1]['combo'], $other)) == 2) {
              $regimen['Dosing'][] = array(
                'Combination' => implode('/', $pillburden['2nrti'][$k1]['combo']),
                'Dose' => $pillburden['2nrti'][$k1]['data']->Dose1 .'/'. $pillburden['2nrti'][$k1]['data']->Dose2,
                'Pills' => $pillburden['2nrti'][$k1]['data']->Pills,
                'Frequency' => $pillburden['2nrti'][$k1]['data']->Frequency,
                'Name' => $pillburden['2nrti'][$k1]['data']->Name,
                'Notes' => $pillburden['2nrti'][$k1]['data']->Notes,
              );
              
              return;
            }
          }
        }  
        
        if (count($other) >= 1) {
          foreach ($other as $k1 => $v1) {
            $regimen['Dosing'][] = array(
              'Combination' => $other[$k1],
              'Dose' => $pillburden['individual'][$other[$k1]]['data']->Dose1,
              'Pills' => $pillburden['individual'][$other[$k1]]['data']->Pills,
              'Frequency' => $pillburden['individual'][$other[$k1]]['data']->Frequency,
              'Name' => $pillburden['individual'][$other[$k1]]['data']->Name,
              'Notes' => $pillburden['individual'][$other[$k1]]['data']->Notes,
            );            
          }
        }
      
        return;
      }
    }
  }
  
  foreach ($regimen['Combination'] as $k => $v) {
    $regimen['Dosing'][] = array(
      'Combination' => $v,
      'Dose' => $pillburden['individual'][$v]['data']->Dose1,
      'Pills' => $pillburden['individual'][$v]['data']->Pills,
      'Frequency' => $pillburden['individual'][$v]['data']->Frequency,
      'Name' => $pillburden['individual'][$v]['data']->Name,
      'Notes' => $pillburden['individual'][$v]['data']->Notes,
    );
  }
}

/*
*
*
*/
function hivassist_process_rankings(&$regimens, $mutations, $comorbidities, $interactions, $options) {
  global $defs;
  
  module_load_include('inc', 'hivassist', 'inc/results.rules');

	// Load the ART Interaction Matrix
	$result = db_query('SELECT * FROM ART_Interactions');
  $data = $result->fetchAll();

	foreach ($data as $k => $v) {
		$drug = $data[$k]->Drug;
		$artinteractions[$drug] = $data[$k];
	}

	$result = db_query('SELECT * FROM Pill_Burden_Table');
	$data = $result->fetchAll();
	
  $drugs = array();
  $dosing = array('Drug1', 'Drug2', 'Drug3');
    
  foreach ($defs['exclude'] as $k => $v) {
    $drugs = array_merge($drugs, $v);  
  }

	foreach ($data as $k => $v) {
    // Only add the extra regimens if the drugs have not been excluded
    foreach ($dosing as $k1 => $v1) {     
      if ($data[$k]->$v1 != NULL && !in_array(substr($data[$k]->$v1, 0, 3), $drugs)) {
        continue 2;
      }
    }

		if ($data[$k]->Class == 'spc') {
      $pillburden['spc'][] = $pillburden['spc2'][] = array(
        'data' => $data[$k],
        'combo' => array($data[$k]->Drug1, $data[$k]->Drug2, $data[$k]->Drug3),
      );
    } elseif ($data[$k]->Class == '2nrti') {
      $pillburden['2nrti'][] = array(
        'data' => $data[$k],
        'combo' => array($data[$k]->Drug1, $data[$k]->Drug2),
      );
    } else {
      $pillburden['individual'][$data[$k]->Drug1] = array(
        'data' => $data[$k],
      );
    }
  }


  foreach ($regimens as $k => $v) {
    $pillburden['spc'] = $pillburden['spc2']; // reset the 3 drug regimens for each guideline regimen
    foreach ($regimens[$k] as $k1 => $v1) {

      if (isset($regimens[$k][$k1]['specifics'])) unset($regimens[$k][$k1]['specifics']);
      if (isset($regimens[$k][$k1]['classes'])) unset($regimens[$k][$k1]['classes']);
      if (isset($regimens[$k][$k1]['drugs'])) unset($regimens[$k][$k1]['drugs']);      

      hivassist_add_regimen_mutations_comorbidities_interactions($regimens[$k][$k1], $mutations, $comorbidities, $interactions);
      hivassist_add_art_interactions($regimens[$k][$k1], $artinteractions);
      hivassist_remove_regimen_both_ritonavir_or_cobi($regimens[$k][$k1]);
      if ($regimens[$k][$k1] == NULL) {
        unset ($regimens[$k][$k1]);
        continue;
      }

      hivassist_add_pill_burden($regimens[$k][$k1], $pillburden); 
      $regimens[$k][$k1]['Pill Burden'] = 0;
      foreach ($regimens[$k][$k1]['Dosing'] as $k2 => $v2) {
        $regimens[$k][$k1]['Pill Burden'] += $regimens[$k][$k1]['Dosing'][$k2]['Pills'] * $regimens[$k][$k1]['Dosing'][$k2]['Frequency'];
      }

      hivassist_rules($regimens[$k][$k1], $regimens[$k], $mutations, $options);
      if ($regimens[$k][$k1] == NULL) {
        unset ($regimens[$k][$k1]);
        continue;
      }
    }
  }
}

/*
*
*
*/
function hivassist_find_regimen_link($regimen, $combinationrule) {
  $search = drupal_lookup_path('source', 'info-sheets/'.implode('-', $regimen));
  
  if ($search) {
    $link = $search;
  } else {
    $TAF = array_search('TAF', $regimen);
    if ($TAF !== FALSE) {
      $regimen_tmp = $regimen;
      $regimen_tmp[$TAF] = 'TDF';
      $link = hivassist_find_regimen_link($regimen_tmp, $combinationrule);
    } else {
      foreach ($combinationrule as $k => $v) {
        if ($v > 0) {
          $combinationrule_tmp[] = $v.'-'.$k;
        }
      }
                 
      $search = drupal_lookup_path('source', 'info-sheets/'.implode('-', $combinationrule_tmp));
      if ($search) {
        $link = $search;
      } else {
        $link = drupal_lookup_path('source', 'info-sheets/not-found');
      }
    }
  }

return $link;
}

/*
* Rank all of the elements by Regimen Score, then by number of drugs
*
*/
function hivassist_sort_regimens(&$regimens) {
	foreach ($regimens as $k => $v) {
		usort($regimens[$k], function($a, $b) {
			if ($a['Score'] == $b['Score']) {			
				if ($a['Pill Burden'] == $b['Pill Burden']) {
					if ($a['Combination'][0] == $b['Combination'][0]) {
						return $b['Combination'][1] > $a['Combination'][1];
					}
					return $b['Combination'][0] > $a['Combination'][0];
				}
				return $a['Pill Burden'] > $b['Pill Burden'];
			} 
			return $a['Score'] > $b['Score'];
		});
	}
}

/*
*
*
*/
function hivassist_generate_regimens_table(&$regimens) {
  hivassist_sort_regimens($regimens);

  $header = array('Rank', 'Regimen', 'Weighed Score', 'Active Drugs', 'Total Pills', 'Max Freq');// 'Number of Drugs');
  foreach ($regimens as $k => $v) {
    foreach ($regimens[$k] as $k1 => $v1) {
      
      if ($k1 == 0) {
        $regimens[$k][$k1]['Rank'] = $regimens[$k][$k1]['Hidden Rank'] = 1;
      } else {
        if ($regimens[$k][$k1]['Score'] == $regimens[$k][$k1 - 1]['Score']) {
          $regimens[$k][$k1]['Hidden Rank'] = $regimens[$k][$k1 - 1]['Hidden Rank'];
          if ($k == 'Expert' && $k1 % 20 == 0) {
            $regimens[$k][$k1]['Rank'] = $regimens[$k][$k1]['Hidden Rank'];
          } else {
            $regimens[$k][$k1]['Rank'] = '';            
          }
        } else {
          $regimens[$k][$k1]['Rank'] = $regimens[$k][$k1]['Hidden Rank'] = $regimens[$k][$k1 - 1]['Hidden Rank'] + 1;
        }
      }
      
      $regimens[$k][$k1]['Print Name'] = implode('+', array_column($regimens[$k][$k1]['Dosing'], 'Combination'));
      $regimens[$k][$k1]['Link'] = hivassist_find_regimen_link($regimens[$k][$k1]['Combination'], $regimens[$k][$k1]['Combination Rule']);

      $freq = max(array_column($regimens[$k][$k1]['Dosing'], 'Frequency'));
      
      if ($freq == 1): $freq = 'qd';
      elseif ($freq == 2): $freq = 'bid';
      elseif ($freq == 3): $freq = 'tid';
      elseif ($freq == 4): $freq = 'qd';
      else: $freq = 'q'. $freq . 'd';
      endif;
     
      $row = array(
        'data' => array(
          'Rank' => $regimens[$k][$k1]['Rank'],
          'Regimen' => $regimens[$k][$k1]['Print Name'],
          'Weighed Score' => $regimens[$k][$k1]['Score'],
          'Active Drugs' => $regimens[$k][$k1]['Active Drugs'],
          'Total Pills' => $regimens[$k][$k1]['Pill Burden'],
          'Max Freq' => $freq,
          //        'Number of Drugs' => $regimens[$k][$k1]['NumberofDrugs'],
        ),
        'class' => array('clickable-row'),
        'data-guideline' => array($k),
        'data-id' => array($k1),
      );
      
      
      if (!empty($regimens[$k][$k1]['Comorbidities']) || !empty($regimens[$k][$k1]['Interactions']) || !empty($regimens[$k][$k1]['ART Interactions'])) {
        $row['class'][] = 'warning';
      }
      
      $rows[$k][] = $row;
    }      

    if ($k == 'Expert') {
      $per_page = 20;
      $current_page = pager_default_initialize(count($rows[$k]), $per_page);
      $chunks = array_chunk($rows[$k], $per_page, TRUE);
      $regimens_table[$k] = theme('table', array('header' => $header, 'rows' => $chunks[$current_page]));
      $regimens_table[$k] .= theme('pager', array('quantity',count($rows[$k])));            
    } else {
      $regimens_table[$k] = theme('table', array('header' => $header, 'rows' => $rows[$k]));
    }

  }

  return $regimens_table;
}